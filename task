#!/bin/bash
#TASK - A CLI reminders and task management toolkit
#CLI reminder toolkit for alerts/terminal headers and more
#Written by Will Russell/Scotchman0
#patch update: 7/3/22
#DEVELOP BRANCH TO BECOME NEW FORK FOR JOB MANAGEMENT ON NODES + SHARED WORKLOAD MANAGEMENT
#Version=1.0

#In order to share access to the common task path, override the defaults set below in variables
#With your own common target/desired dir, and ensure all users can view/edit contents of taskdir

#################################################################################

# EXAMPLE OUTPUT:

#  ++++++++++++++++++++++++++++
#       JOBS ON THIS NODE
#  =~=~=~=~=~=~=~=~=~=~=~=~=~=~
# JOB     USER                 TASK                                 ETA     ATQ   GPU
#      1  will   test                                               17:22   +35+   N      
#      2  will   Long running inference project                     NONE   +NONE+   N  

######################~~VARIABLES~~##############################

TASKDIR=~/task-app
TASKPATH=$TASKDIR/task_list
TASKCONFIG=$TASKDIR/task.conf

####################################~~FUNCTION BLOCKS~~########################


setup() {
#run only if $TASKCONFIG does not exist - see firstrun block
#define file locations and paths
mkdir ${TASKDIR}
touch ${TASKPATH}
touch ${TASKCONFIG}
chmod 775 ${TASKPATH}
chmod 775 ${TASKCONFIG}
echo "this software uses the package 'at' - please ensure it is installed/enabled to allow reminders"
echo "Will create reminders in queue 'T' - set this value manually if you wish with 'task config"
echo "#Taskconfig settings for task script written/maintained by Will Russell/Scotchman0" >> $TASKCONFIG
echo "#The following variables can be set to modify base behavior" >> $TASKCONFIG
echo "EDITOR=vi #set to nano, vim or other text editor to allow modifying files, set to vi by default"  >> $TASKCONFIG
echo "QUEUE=T #define defult atq for jobs relating to task" >> $TASKCONFIG
echo "GPU_TOGGLE=true #sets option for 'GPU' column being gathered/watched in task- set to false to skip" >> $TASKCONFIG
echo "NOTIFY=notify-send #options: 'notify-send', 'wall-echo', 'mail' --> set option on how atq will alert you" >> $TASKCONFIG
echo "MAIL_RECIPIENTS='admin@example.com' #takes a comma-separated list of users, quoted: 'admin@example.com,admin2@example.com,..." >> $TASKCONFIG
echo "#Note that 'NOTIFY' and 'MAIL_RECIPEINTS must both be set, and a mail-handler must be preconfigured">> $TASKCONFIG
}


auto_complete() {
# Add tasks printout to new-shell start:
echo "would you like to have tasks added to your ~/.*shrc profile to print list when you start a new shell?"
echo "y|N"
read option
case $option in
  y|Y) 
    echo "echo ## REMINDERS ##" >> ~/.*shrc
    echo "cat $TASKPATH" >> ~/.*shrc
    echo "cat command added to your ~/.*shrc file to read contents from ~/.task_list"
    ;;
  n|N) 
    echo "no configuration changes made"
    echo "to add tasks to your shell at startup later, run: echo 'cat $TASKPATH' >> ~/.*shrc"
    ;;
  *) 
     echo "non y/n answer recieved, defaulting to no change"
     echo "to add tasks to your shell at startup later, run: echo 'cat $TASKPATH' >> ~/.*shrc"
    ;;
esac
}


alert() { ##currently the logic works, but doesn't entirely seem to want to execute/alert cleanup"
  #Alert function for managing atq entries
	if [[ ETA == NONE ]]
  then
    "null" #null update so that logic completes withough complaining
    exit 0
  else
    #placement of custom 'T' task queue to keep things unified:
    if [[ "$NOTIFY" = notify-send ]]
      then
        echo "notify-send 'node job has completed: $REMINDER' " | at -q $QUEUE $ETA 2>/dev/null
        AT_QUEUE=$(atq -q ${QUEUE} | tail -n 1 | awk {'print $1'})
    elif [[ "$NOTIFY" = wall-echo ]]
      then
        echo "wall 'node job has completed: $REMINDER'" | at -q $QUEUE $ETA 2>/dev/null
        AT_QUEUE=$(atq -q ${QUEUE} | tail -n 1 | awk {'print $1'})
    elif [[ "$NOTIFY" = mail ]]
      then
        echo "mail -s 'node job has completed: $REMINDER' $MAIL_RECIPIENTS" | at -q $QUEUE $ETA 2>/dev/null
        AT_QUEUE=$(atq -q ${QUEUE} | tail -n 1 | awk {'print $1'})
    else
      echo "'task config' option NOTIFY not defined, defaulting to notify-send"
      echo "notify-send 'node job has completed: $REMINDER' " | at -q $QUEUE $ETA  2>/dev/null
      AT_QUEUE=$(atq -q ${QUEUE} | tail -n 1 | awk {'print $1'})
    fi

    #tried to implement a 'delete task atq job in the same line, but it can't handle it, so creating a second job:
    echo "sed -i '/$REMINDER/d' $TASKPATH" | at -q $QUEUE $ETA 2>/dev/null
    DEL_JOB=$(atq -q ${QUEUE} | tail -n 1 | awk {'print $1'})
  fi
}


#When called, remove the atq entry for the value defined by '-d' function
alert_remove(){
  atrm ${ENTRY} &> /dev/null
}

#When called, remove all atq entries in '-q $QUEUE' to avoid interfering with existing ATQ jobs
# use 'task setup' to modify queue selection
alert_remove_all (){
  #purge all atq $(QUEUE) entries (default 'T')
  for x in $(atq -q ${QUEUE} | awk {'print $1'}); do atrm $x; done
}


#CHECK IF THIS IS THE FIRST TIME THIS PROGRAM HAS RUN, CONFIGURE DEFAULTS IF SO:
if [ ! -f "$TASKCONFIG" ]; then
   echo "establishing default setup and storing tasks in ${TASKPATH}"
   setup
   auto_complete
   echo "try task -h for usage and syntax"
fi

########################################################################################
#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~START OF SCRIPT LOGIC~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~~#~#

#source the config file
. ${TASKCONFIG}

#primary action block:
while test $# -gt -1; do #general while loop to lock behavior surrounding case options. 
  case "$1" in
    -h|help)
      shift
      echo "#######  task help #######"
      echo "command usage: $ task <option> <string>"
      echo ""
      echo " -h|help: print this brief help"
      echo " -n|--new: create new reminder entry --> $ task -n 'buy eggs'"
      echo " >>> '-n' has follow-up prompts: ETA for reminders and a GPU in-use Y/N prompt"
      echo " -d|--delete: delete line entry by number... ex: 'task -d 3'"
      echo " -C|--clear: purge all reminders from list"
      echo " config: open an editor and modify the config file to set options"
      echo " edit: opens an editor to modify the raw task file to modify entries manually"
      echo ""
      echo "description of task columns:"
      echo ""
      echo "   JOB       |     TASK      |  ETA   |       ATQ         |  GPU  | USER"
      echo "<job number> | <description> | <time> | <reminder number> | <Y/N> | <username>"
      echo ""
      echo "JOB      TASK                                          ETA     ATQ    GPU   USER"
      echo "1   This is an example task                            20:59   +64+   Y     will"
      echo "2   Docker training in progress                        NONE   +NONE+   N    john"
      echo "#######  task help #######"
      break
      ;;
    -n|--new) #new-task entry baseline (TESTING WITH FUNCTION BLOCK)
      shift
      #Default value setting of variables
      GPU="N"
      USER=$(whoami)
      # logical call set for 'task was submitted, and has a value after -n of length longer than 0'
        if test $# -gt 0; then
          #set the task as a value for use with AT
          REMINDER=$@
          echo "Set ETA value as integer in hours, insert 0 for none"
          read SETTIME
          if [[ ${SETTIME} != 0 ]]
            then
              #ETA=$(echo $(date -d +${SETTIME}hours +%H:%M))
              ETA=$(echo $(date -d +${SETTIME}hours "+%H:%M %D"))
              alert
            else
              ETA=NONE
              AT_QUEUE="NONE"
          fi
          if [[ "$GPU_TOGGLE" = true ]]
          then
            echo "Toggle indicator for GPU in-use: (Y/N)"
            read GPU
            #print the primary output to the $TASKPATH file once options set
            echo " $@ | $ETA | +$AT_QUEUE+ | $GPU | ${USER}" >> ${TASKPATH}
          else 
          #print the primary output to the $TASKPATH file once options set
          echo " $@ | $ETA | +$AT_QUEUE+ | ${USER}" >> ${TASKPATH}
          fi
          # #print the primary output to the $TASKPATH file once options set
          # echo " $@ | $ETA | +$AT_QUEUE+ | $GPU | ${USER}" >> ${TASKPATH}
        else
          "null"
        fi
      break
      ;;
    config) #calls a default editor to modify the config using default editor selection
      $EDITOR $TASKCONFIG
      break
      ;;
    edit) #calls a default editor to modify the existing TASK entries (note does not modify ATQ)
      $EDITOR $TASKPATH
      echo "tasks edited, note that existing ATQ entries are not modified, you may need to delete manually with atrm <#>"
      break
      ;;
    -d|--delete|--done) #delete line entry by number
      cat -n ${TASKPATH}
      echo "do you wish to delete task entry $@? Y|n - will also delete at queue entry"
      read reply
      case $reply in
        y|Y) ## NEED TO INCLUDE A CHECK THAT IF ENTRY=0 THEN SKIP ALERT_REMOVE
          shift
          #define the line entry you are deleting as a variable to be removed
          DLINE="$@"
          #find the associated ATQ entry for the dline entry, to then call alert_removal
          # checks taskpath, looking for the # you selected, then uses cut to highlight the 
          # ATQ value stored between the '+' symbols, and extracts/sets the ENTRY value
          # Note, this doesn't delete the 'second atq entry that is set for cleanup but that's OK'
          # these stale entries self-resolve with no alert/fuss and can be purged with 'task -C' or 'atrm #'
          ENTRY=$(cat -n $TASKPATH | grep ${DLINE} | cut -d "+" -f2)          
          #use sed to overwrite/remove the entry/clear task
          sed -i "${DLINE}d" $TASKPATH
          echo "deleted!"
          # call atq removal:
          alert_remove
          break
            ;;
        n|N) 
          echo "cancelled delete"
          exit 1
            ;;
        *)
          echo "non y/n answer provided, no change"
          exit 0
          ;;
        esac
        break
        ;;
    -C|--clear) # purge all reminders
       echo "do you wish to purge all task entries?"
       read reply
       case $reply in
         y|Y)
           shift
           echo "removing all reminders"
          #easiest to just nuke the file and re-init if you want them all gone
           rm $TASKPATH
           touch $TASKPATH
           # call atq cleanup:
           alert_remove_all
           ;;
         n|N)
           echo "cancelled delete"
           exit 0
           ;;
         *)
           echo "non y/n answer provided, no change"
           exit 0
           ;;
         esac
         break
         ;;
    *) #no option default -- print all tasks on node + formatting for column alignment (print on 'task' --noopts)
        echo " ++++++++++++++++++++++++++++"
        echo "      JOBS ON THIS NODE"
        echo " =~=~=~=~=~=~=~=~=~=~=~=~=~=~"
        if [[ "$GPU_TOGGLE" = true ]]
          then
            echo "JOB TASK ETA ATQ GPU USER" | awk '{ printf "%-8s %-50s %-17s %-6s %-5s %-2s\n", $1, $2, $3, $4, $5, $6}' #test
            cat -n ${TASKPATH} | awk 'BEGIN { FS = "|" };{ printf "%-57s %-5s %-5s %-5s %-8s\n", $1, $2, $3, $4, $5, $6}' #test
          else
            echo "JOB TASK ETA ATQ USER" | awk '{ printf "%-8s %-50s %-7s %-6s %-5s %-2s\n", $1, $2, $3, $4, $5, $6}' #test
            cat -n ${TASKPATH} | awk 'BEGIN { FS = "|" };{ printf "%-57s %-5s %-5s %-5s %-8s\n", $1, $2, $3, $4, $5, $6}' #test
        fi
        break 
		;;
  esac
done
exit 0